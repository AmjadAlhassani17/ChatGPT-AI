import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:logger/logger.dart';
import 'package:dio/dio.dart' as dio;
import '../../../network/api/dio_manager/dio_manage_class.dart';
import '../../../network/api/helper/home_helper.dart';
import '../../../network/utils/constance_network.dart';
import '../../model/autogenerated_model.dart';
import '../../model/chat_model.dart';

class HomeViewModel extends GetxController {
  // GlobalKey<ScaffoldState> homeScaffoleKey = GlobalKey<ScaffoldState>();
  ScrollController scrollControllerList = ScrollController();
  final tdTextAddingAd = TextEditingController();
  bool isTyping = false;
  bool isLike = false;
  
  String model = "text-davinci-003";
  String tdTextAddingController = "";


  void restController() {
    tdTextAddingAd.clear();
    update();
  }




  void changeStateTyping({required bool typing}) {
    isTyping = typing;
    update();
  }


  void changeModel({required String newModel}) {
    model = newModel;
    update();
  }

  List<Autogenerated> autogeneratedModels = [];
  Future<void> getModels() async {
    try {
      await HomeHelper.instance.getModelss().then((value) => {
            autogeneratedModels = value,
            update(),
          });
    } catch (e) {
      Logger().e("Error getModels :  $e");
    }
  }

  void restChat() {
    chatModel.clear();
    chatScreenModel.clear();
    update();
  }

  List<ChatModel> chatModel = [];
  List<ChatModel> chatScreenModel = [];
  Future<List<ChatModel>> sendMessageAd(
      {required String message,
      required String modelId,
      required int maxTokens}) async {
    try {
      dio.Response<dynamic> res =
          await DioManagerClass.getInstance.dioPostMethod(
        url: ConstanceNetwork.sendMessage,
        body: {
          'model': modelId,
          'prompt': message,
          'max_tokens': maxTokens,
        },
        header: ConstanceNetwork.header(TypeToken.authorizationContentType),
      );

      if (res.data["choices"].length > 0) {
        // Logger().e("jsonRes[choices]text  :  ${res.data["choices"][0]["text"]}");
        chatModel = List.generate(
          res.data["choices"].length,
          (index) => ChatModel(
            msg: res.data["choices"][index]["text"],
            chatIndex: 1,
          ),
        );
      }
      isTyping = false;
      scrollControllerList.animateTo(
      scrollControllerList.position.maxScrollExtent,
      duration: const Duration(microseconds: 1500),
      curve: Curves.easeOut,
    );
      update();
      return chatModel;
    } catch (e) {
      Logger().e("catch error :  $e");
      rethrow;
    }
  }
}
